<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    
    <comment>
        This is a sample configuration file for Tabtype, which
        uses the Java XML properties syntax. Next to this,
        the regular Java properties format is also supported;
        which combination of these is in use depends on the
        -config arguments with which the tool is invoked.
    </comment>
    
    <!--
        Frame defaults. If no position is set, the window is centered.
    -->

    <entry key="frame.x">50</entry>
    <entry key="frame.y">10</entry>
    <entry key="frame.w">700</entry>
    <entry key="frame.h">450</entry>

    <!--
        Tab bar position (1 - top to 4 - right)
    -->
    <entry key="tab.placement">1</entry>

    <entry key="editor.font">Luxi Mono</entry>
    <!--
    <entry key="editor.fontsize">12</entry>
    -->
    <!--
    <entry key="editor.tabsize">4</entry>
    -->
    <!--
    <entry key="scroll.increment">16</entry>
    -->
    <!--
    <entry key="resultview.height">150</entry>
    -->

    <entry key="default.bg">#eeeeee</entry>
    <entry key="editor.nonFocusedBorder">#ffffff</entry>
    <entry key="editor.focusedBorder">#0000ff</entry>
    <entry key="editor.unsavedBorder">#aaaaaa</entry>
    <entry key="frame.bg">#dddddd</entry>

    <!--
        UI defaults can be specified for colors and gradients like below.
        They can be used to modify LAF appearance.
    -->

    <entry key="uiDefaults.color.Button.background">#eeeeee</entry>
    <entry key="uiDefaults.color.ComboBox.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.highlight">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.shadow">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.darkShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbDarkShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbHighlight">#eeeeee</entry>
    <entry key="uiDefaults.gradient.ScrollBar.gradient">0.3,0.0,#c8ddf2,#c8ddf2,#c8ddf2</entry>
    <entry key="uiDefaults.color.Table.gridColor">#b8cfe5</entry>
    <entry key="uiDefaults.color.Table.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.MenuBar.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.TextField.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.FormattedTextField.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.TextArea.background">#f9f9f9</entry>

    <!--
        For connections, the part after the first dot is the name
        that is displayed inside the tool.
    -->
    <entry key="connections.derby.url">jdbc:derby:derbyDB;create=true</entry>
    <entry key="connections.derby.username">tabtype</entry>
    <entry key="connections.derby.password">x</entry>
    <entry key="connections.derby.bg">#f0f0d7</entry>
    <!--
        confirmations means that the tool gives a note when an operation
        has come back with an update count.
    -->
    <!--
    <entry key="connections.derby.confirmations">true</entry>
    -->

    <!--
        Placeholders for SQL sections (both in the config as well as
        in the tool) are recognized using this regex:
    -->
    <entry key="placeholder.regex">\&amp;param[_0-9a-zA-Z]*</entry>
    
    <!--
        initSql is a statement which will be executed whenever a matching
        connection is opened. There will be no output possibility for such
        statements.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.initSql."). Multiple matches
        are resolved by giving connection assignments higher precedence.
    -->
    <!--
    <entry key="drivers.derby.initSql">set schema=sys</entry>
    -->
    <!--
        completionTemplate allows generating content for F8.
        An optional placeholder is replaced with the text under the cursor.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.completionTemplate."). Multiple matches
        are resolved by giving connection assignments higher precedence.
    -->
    <entry key="drivers.derby.completionTemplate">
        select tablename from sys.systables where lower(tablename) like lower(&amp;param||'%')
    </entry>

    <!--
        snippet allows specifying SQL shorthands for F2.
        An optional placeholder is replaced with the selected text.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.snippets."). Multiple matches
        are merged.
    -->
    <!--
    <entry key="drivers.derby.snippets.systables">
        select * from sys.systables where tablename like &amp;param||'%';
    </entry>
    -->

    <!--
        infoTemplate is used for the F1 action. The placeholder
        is replaced with the text under the cursor.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.infoTemplate."). Multiple matches
        are resolved by giving connection assignments higher precedence.
    -->
    <entry key="drivers.derby.infoTemplate">
        select * from sys.systables where tablename = upper(&amp;param)
    </entry>

    <!--
        externalTools allows specifying commands that will show
        up in the Tools menu. Those operate by getting the query
        under the cursor through STDIN and write their result to
        STDOUT. Tabtype will replace the selected content with that
        output. For all this, UTF-8 encoding is used.
    -->
    <entry key="externalTools.SQL::Beautify.command.1">perl</entry>
    <entry key="externalTools.SQL::Beautify.command.2">-I</entry>
    <entry key="externalTools.SQL::Beautify.command.3">~/config/contrib/perl-lib</entry>
    <entry key="externalTools.SQL::Beautify.command.4">-e</entry>
    <entry key="externalTools.SQL::Beautify.command.5"><![CDATA[
        use SQL::Beautify;
        my $b = SQL::Beautify->new(spaces => 1,space => chr(9));
        $b->add_rule('break-pop-token',')');
        $b->add_rule('break-token',['or','and']);
        $b->add($_) while(<STDIN>);
        print $b->beautify;
    ]]></entry>

    <!--
        Example SQLs for Oracle
    -->

    <entry key="drivers.oracle.infoTemplate">
        select
            t.table_name,
            t.column_name,
            data_type,
            data_length,
            data_precision,
            data_scale,
            nullable,
            column_id,
            data_default,
            (
                select listagg(to_char(constraint_name),',')
                from user_cons_columns c
                where c.table_name=t.table_name and c.column_name=t.column_name
            ) used_by_constraints,
            co.comments
        from user_tab_cols t
        left join user_col_comments co
            on co.table_name=t.table_name
            and co.column_name=t.column_name
        where t.table_name=upper(&amp;param)
        order by t.table_name,column_id
    </entry>
    <entry key="drivers.oracle.completionTemplate">
        select to_clob(table_name) completion from user_tables
        where instr(table_name,upper(&amp;param)) = 1
        union all
        select to_clob(column_name) from user_tab_cols
        where instr(column_name,upper(&amp;param)) = 1
        union all
        select
            'insert into '||table_name||'('||
            rtrim(xmlcast(xmlagg(xmlelement(e,
            case when nullable='Y' then chr(10)||'--'||column_name else chr(10)||column_name end
            ,',').extract('//text()') ) as clob),',')
            ||chr(10)||')values('||
            rtrim(xmlcast(xmlagg(xmlelement(e,
            case
            when nullable='Y' then chr(10)||'--'''' /*'||column_name||'*/'
            else chr(10)||''''' /*'||column_name||'*/'
            end
            ,',').extract('//text()') ) as clob),',')
            ||chr(10)||');'
        from user_tab_cols
        where instr('INSERT INTO '||table_name,upper(&amp;param)) = 1
        group by table_name
        union all
        select
            'update '||table_name||' set '||
            rtrim(xmlcast(xmlagg(xmlelement(e,
            case
            when nullable='Y' then chr(10)||'--'||column_name||'='''''
            else chr(10)||column_name||'='''''
            end
            ,',').extract('//text()') ) as clob),',')
            ||chr(10)||';'
        from user_tab_cols
        where instr('UPDATE '||table_name,upper(&amp;param)) = 1
        group by table_name
        union all
        select
            'select '||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||column_name,',').extract('//text()') ) as clob),',')
            ||chr(10)||'from '||table_name||';'
        from user_tab_cols
        where instr('SELECT * FROM '||table_name,upper(&amp;param)) = 1
        group by table_name
        union all
        select
            'merge into '||table_name||' t using(select '||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||''''' '||column_name,',').extract('//text()') ) as clob),',')
            ||chr(10)||'from dual) s on('||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||'s.'||column_name||'=t.'||column_name,' and ').extract('//text()') ) as clob),' and ')
            ||chr(10)||') when matched then update set '||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||'t.'||column_name||'=s.'||column_name,',').extract('//text()') ) as clob),',')
            ||chr(10)||'when not matched then insert('||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||column_name,',').extract('//text()') ) as clob),',')
            ||chr(10)||')values('||
            rtrim(xmlcast(xmlagg(xmlelement(e,chr(10)||'s.'||column_name,',').extract('//text()') ) as clob),',')
            ||chr(10)||');'
        from user_tab_cols
        where instr('MERGE INTO '||table_name,upper(&amp;param)) = 1
        group by table_name
        fetch first 16 rows only
    </entry>
    <entry key="drivers.oracle.snippets.xmlserialize">
        xmlserialize(document xmltype(&amp;param) indent size=2)
    </entry>
    <entry key="drivers.oracle.snippets.xmltype">
        cast(xmltype(&amp;param).extract('//text()')
    </entry>
    <entry key="drivers.oracle.snippets.xmlagg">
        rtrim(xmlcast(xmlagg(xmlelement(e,&amp;param,',').extract('//text()') ) as clob),',')
    </entry>
    <entry key="drivers.oracle.snippets.sqlarea">
        select s.sid,s.serial#,s.state,s.event,a.last_load_time,a.parsing_schema_name,u.blocks,a.elapsed_time,a.executions,a.disk_reads,substr(a.sql_text,1,50)
        from v$sqlarea a join v$session s using(sql_id) join v$sort_usage u on u.session_addr=s.saddr
        where s.username=&amp;param order by a.last_load_time desc
    </entry>
</properties>