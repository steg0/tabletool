<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    
    <comment>
        This is an annotated configuration file for Tabtype, which
        uses the Java XML properties syntax. Next to this, the regular
        Java properties format is also supported; which combination of
        these is in use depends on the -config arguments with which
        the tool is invoked.
    </comment>
    
    <!--
        Frame defaults. If no position is set, the window is centered.
    -->

    <!--
    <entry key="frame.x">50</entry>
    <entry key="frame.y">10</entry>
    -->
    <entry key="frame.w">800</entry>
    <entry key="frame.h">450</entry>

    <!--
        Tab bar position (1 - top to 4 - right)
    -->
    <entry key="tab.placement">1</entry>

    <!--
        The font to use for editor buffers. This will also be used for
        info display and cell value windows (except for blob hexdumps,
        which will use the system monospace font).
    -->
    <entry key="editor.font">Go Mono</entry>
    <entry key="editor.fontsize">13</entry>
    <!--
    <entry key="editor.tabsize">4</entry>
    -->
    <!--
    <entry key="scroll.increment">16</entry>
    -->
    <!--
    <entry key="resultview.height">150</entry>
    -->

    <entry key="default.bg">#eeeeee</entry>
    <entry key="editor.nonFocusedBorder">#ffffff</entry>
    <entry key="editor.focusedBorder">#0000ff</entry>
    <entry key="editor.unsavedBorder">#aaaaaa</entry>
    <entry key="frame.bg">#dddddd</entry>

    <!--
        UI defaults can be specified for colors and gradients like below.
        They can be used to modify LAF appearance.
    -->

    <entry key="uiDefaults.color.Button.background">#eeeeee</entry>
    <entry key="uiDefaults.color.ComboBox.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.highlight">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.shadow">#f9f9f9</entry>
    <entry key="uiDefaults.color.ScrollBar.darkShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbDarkShadow">#b8cfe5</entry>
    <entry key="uiDefaults.color.ScrollBar.thumbHighlight">#eeeeee</entry>
    <entry key="uiDefaults.gradient.ScrollBar.gradient">0.3,0.0,#c8ddf2,#c8ddf2,#c8ddf2</entry>
    <entry key="uiDefaults.color.Table.gridColor">#b8cfe5</entry>
    <entry key="uiDefaults.color.Table.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.MenuBar.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.TextField.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.FormattedTextField.background">#f9f9f9</entry>
    <entry key="uiDefaults.color.TextArea.background">#f9f9f9</entry>

    <!--
        For connections, the part after the first dot is the name
        that is displayed inside the tool.
    -->
    <entry key="connections.derby.url">jdbc:derby:tabtype_user_derby;create=true</entry>
    <entry key="connections.derby.username">tabtype</entry>
    <!-- A password can have the special value "PROMPT", which means
         the user will be asked for it once every property refresh. If
         somebody changes the server password in the meantime, this
         means a property refresh will need to be executed by the
         user in the File menu. -->
    <!--
    <entry key="connections.derby.password">PROMPT</entry>
    -->
    <entry key="connections.derby.bg">#f0f0d7</entry>
    <entry key="connections.derby.logBg">#c1c193</entry>
    <entry key="connections.derby.logFg">#ffffff</entry>
    <entry key="connections.derby.focusedBorderColor">#ee3838</entry>
    <!--
        confirmations means that the tool gives a note when an operation
        has come back with an update count. Default is false.
    -->
    <!--
    <entry key="connections.derby.confirmations">true</entry>
    -->
    <!--
        updatableResultSets means that the tool uses ResultSet.TYPE_FORWARD_ONLY
        in conjunction with ResultSet.CONCUR_UPDATABLE for statements.
        Otherwise the flags aren't specified. Default is true.
    -->
    <!--
    <entry key="connections.derby.updatableResultSets">true</entry>
    -->

    <!--
        Placeholders for SQL sections (both in the config as well as
        in the tool) are recognized using this regex:
    -->
    <entry key="placeholder.regex">\&amp;param[_0-9a-zA-Z]*</entry>
    
    <!--
        initSql is a statement which will be executed whenever a matching
        connection is opened. There will be no output possibility for such
        statements.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.initSql."). Multiple matches
        are resolved by giving connection assignments higher precedence.
    -->
    <!--
    <entry key="drivers.derby.initSql">set schema=sys</entry>
    -->
    <!--
        completionTemplate allows generating content for F8.
        An optional placeholder is replaced with the text under the
        cursor.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.completionTemplate."). Multiple
        matches are resolved by giving connection assignments higher
        precedence.
    -->
    <entry key="drivers.derby.completionTemplate">
        select tablename from sys.systables where lower(tablename) like lower(&amp;param||'%')
    </entry>

    <!--
        snippet allows specifying SQL shorthands for F2.
        An optional placeholder is replaced with the selected text.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.snippets."). Multiple matches
        are merged.
    -->
    <!--
    <entry key="drivers.derby.snippets.systables">
        select * from sys.systables where tablename like &amp;param||'%';
    </entry>
    -->

    <!--
        infoTemplate is used for the F1 action. The placeholder
        is replaced with the text under the cursor.
        It is possible to assign them to drivers as well as connections
        (with "connections.SOME_NAME_REGEX.infoTemplate."). Multiple
        matches are resolved by giving connection assignments higher
        precedence.
        Empty columns will not be shown in the result of this query.
    -->
    <entry key="drivers.derby.infoTemplate">
        select * from sys.systables where tablename = upper(&amp;param)
    </entry>

    <!--
        externalTools allows specifying commands that will show
        up in the Tools menu. Those operate by getting the query
        under the cursor through STDIN and writing their result to
        STDOUT. Tabtype will replace the selected content with that
        output. For all this, UTF-8 encoding is used. The operation
        is blocking, so the execution should not take too long.
    -->
    <entry key="externalTools.SQL::Beautify.command.1">perl</entry>
    <entry key="externalTools.SQL::Beautify.command.2">-I</entry>
    <entry key="externalTools.SQL::Beautify.command.3">~/config/contrib/perl-lib</entry>
    <entry key="externalTools.SQL::Beautify.command.4">-e</entry>
    <entry key="externalTools.SQL::Beautify.command.5"><![CDATA[
        use SQL::Beautify;
        my $b = SQL::Beautify->new(spaces => 1,space => chr(9));
        $b->add_rule('break-pop-token',')');
        $b->add_rule('break-token',['or','and']);
        $b->add($_) while(<STDIN>);
        print $b->beautify;
    ]]></entry>

    <!--
        Example SQLs
    -->

    <entry key="drivers.derby.infoTemplate">
        select
            t.tablename,
            c.columnname,
            c.columnnumber,
            c.columndatatype,
            c.columndefault,
            c.columndefaultid,
            c.autoincrementvalue,
            c.autoincrementstart,
            c.autoincrementinc,
            c.autoincrementcycle
        from sys.syscolumns c
        join sys.systables t
            on c.referenceid=t.tableid
        where lower(t.tablename)=lower(&amp;param)
    </entry>
    <entry key="drivers.derby.completionTemplate">
        select tablename
        from sys.systables
        where lower(tablename) like lower(&amp;param || '%')
        union
        select columnname
        from sys.syscolumns
        where lower(columnname) like lower(&amp;param || '%')
    </entry>

    <entry key="drivers.sqlserver.infoTemplate">
        select
            table_catalog,
            table_schema,
            table_name,
            column_name,
            ordinal_position,
            column_default,
            is_nullable,
            data_type,
            character_maximum_length,
            character_octet_length,
            numeric_precision,
            numeric_precision_radix,
            numeric_scale
        from information_schema.columns
        where lower(table_name) = lower(&amp;param)
    </entry>
    <entry key="drivers.sqlserver.completionTemplate">
        select tablename
        from sys.tables
        where lower(tablename) like lower(&amp;param || '%')
        union
        select column_name
        from information_schema.columns
        where table_schema not in('information_schema','pg_catalog')
        and lower(column_name) like lower(&amp;param || '%')
    </entry>

    <entry key="drivers.oracle.infoTemplate">
        select
            t.table_name,
            t.column_name,
            data_type,
            data_length,
            char_length,
            data_precision,
            data_scale,
            nullable,
            column_id,
            data_default,
            (
                select listagg(to_char(constraint_name),',')
                from user_cons_columns c
                where c.table_name=t.table_name and c.column_name=t.column_name
            ) used_by_constraints,
            co.comments
        from user_tab_cols t
        left join user_col_comments co
            on co.table_name=t.table_name
            and co.column_name=t.column_name
        where t.table_name=upper(&amp;param)
        order by t.table_name,column_id
    </entry>
    <entry key="drivers.oracle.completionTemplate">
        select table_name
        from user_tables
        where instr(table_name,upper(&amp;param)) = 1
        union
        select column_name
        from user_tab_cols
        where instr(column_name,upper(&amp;param)) = 1
    </entry>
    <entry key="drivers.oracle.snippets.xmlserialize">
        xmlserialize(document xmltype(&amp;param) indent size=2)
    </entry>
    <entry key="drivers.oracle.snippets.xmltype">
        cast(xmltype(&amp;param).extract('//text()')
    </entry>
    <entry key="drivers.oracle.snippets.xmlagg">
        rtrim(xmlcast(xmlagg(xmlelement(e,&amp;param,',').extract('//text()') ) as clob),',')
    </entry>
    <entry key="drivers.oracle.snippets.sqlarea">
        select s.sid,s.serial#,s.state,s.event,a.last_load_time,a.parsing_schema_name,u.blocks,a.elapsed_time,a.executions,a.disk_reads,substr(a.sql_text,1,50)
        from v$sqlarea a join v$session s using(sql_id) join v$sort_usage u on u.session_addr=s.saddr
        where s.username=&amp;param order by a.last_load_time desc
    </entry>

    <entry key="drivers.as400.infoTemplate">
        select
            table_schema,
            table_name,
            c.ordinal_position,
            column_name,
            column_heading,
            data_type,
            length,
            numeric_scale,
            numeric_precision,
            numeric_precision_radix,
            character_maximum_length,
            character_octet_length,
            storage,
            datetime_precision,
            is_nullable,
            is_updatable,
            has_default,
            column_default,
            user_defined_type_schema,
            user_defined_type_name,
            is_identity,
            identity_generation,
            identity_start,
            identity_increment,
            identity_minimum,
            identity_maximum,
            identity_cycle,
            identity_cache,
            identity_order,
            column_expression,
            hidden,
            has_fldproc
        from qsys2.syscolumns c
        join qsys2.library_list_info i
            on i.schema_name=c.table_schema
        where lower(table_name) like lower(&amp;param || '%')
    </entry>
    <entry key="drivers.as400.completionTemplate">
        select table_name
        from qsys2.systables t
        join qsys2.library_list_info i
            on i.schema_name=t.table_schema
        where lower(table_name) like lower(&amp;param || '%')
        union
        select column_name
        from qsys2.syscolumns c
        join qsys2.library_list_info i
            on i.schema_name=c.table_schema
        where lower(column_name) like lower(&amp;param || '%')
    </entry>

    <entry key="drivers.postgresql.infoTemplate">
        select
            table_catalog,
            table_schema,
            table_name,
            column_name,
            ordinal_position,
            column_default,
            is_nullable,
            data_type,
            character_maximum_length,
            character_octet_length,
            numeric_precision,
            numeric_precision_radix,
            numeric_scale
        from information_schema.columns
        where lower(table_name) = lower(&amp;param)
    </entry>
    <entry key="drivers.postgresql.completionTemplate">
        select tablename
        from pg_tables
        where schemaname not in('information_schema','pg_catalog')
        and tablename ilike &amp;param || '%'
        union
        select column_name
        from information_schema.columns
        where table_schema not in('information_schema','pg_catalog')
        and column_name ilike &amp;param || '%'
    </entry>
</properties>
